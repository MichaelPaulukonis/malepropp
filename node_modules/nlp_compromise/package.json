{
  "author": {
    "name": "Spencer Kelly",
    "email": "spencerkelly86@gmail.com",
    "url": "http://spencermounta.in"
  },
  "name": "nlp_compromise",
  "description": "natural language processing in the browser",
  "version": "0.2.2",
  "repository": {
    "type": "git",
    "url": "git://github.com/spencermountain/nlp-node.git"
  },
  "main": "index.js",
  "engines": [
    "node >= 0.3.6"
  ],
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-concat": "~0.1.3",
    "grunt-contrib-uglify": "~0.2.2"
  },
  "readme": "#No training, no prolog.\na Natural-Language-Processing library *in javascript*, small-enough for the browser, and quick-enough to run on keypress :two_men_holding_hands:\n\nit does [tons of clever things](http://rawgit.com/spencermountain/nlp_compromise/master/client_side/basic_demo/index.html). it's smaller than jquery, and scores 86% on the [Penn treebank](http://www.cis.upenn.edu/~treebank/).\n```javascript\nnlp.pos('she sells seashells by the seashore')[0].to_past()\n//she sold seashells by the seashore\n```\n##Check it out\n\n* [Long Text Demo](http://rawgit.com/spencermountain/nlp_compromise/master/client_side/long_demo/index.html)\n* [Specific Methods](http://rawgit.com/spencermountain/nlp_compromise/master/client_side/basic_demo/index.html)\n* [Realtime Demo](http://rawgit.com/spencermountain/nlp_compromise/master/client_side/cute_demo/index.html)\n\n[![Video](http://i.vimeocdn.com/video/493948602_640.jpg)](https://vimeo.com/109880250)\n\n##Justification\nIf the 80-20 rule applies for most things, the ''94-6 rule'' applies when working with language - by [Zipfs law](http://www.businessinsider.com/zipfs-law-and-the-most-common-words-in-english-2013-10):\n>The **[top 10 words](http://www.businessinsider.com/zipfs-law-and-the-most-common-words-in-english-2013-10)** account for 25% of used language.\n\n>The **top 100 words** account for 50% of used language.\n\n>The **top 50,000 words** account for 95% of used language.\n\nOn the [Penn treebank](http://www.cis.upenn.edu/~treebank/), for example, this is possible:\n\n* just a 1 thousand word lexicon: **45% accuracy**\n* ... then falling back to nouns: **70% accuracy**\n* ... then some suffix regexes: **74% accuracy**\n* ... then some sentence-level postprocessing: **81% accuracy**\n\nThe process is to get some curated data, find the patterns, list the exceptions. Bada bing, bada boom.\nIn this way a satisfactory NLP library can be built with breathtaking lightness.\n\nNamely, it can be run right on the user's computer instead of a server.\n\n## Client-side\n```javascript\n<script src=\"https://rawgit.com/spencermountain/nlp_compromise/master/client_side/nlp.min.js\"> </script>\n<script>\n  nlp.noun(\"dinosaur\").pluralize()\n  //dinosaurs\n</script>\n```\n\n## Server-side\n```javascript\n$ npm install nlp_compromise\n\nnlp = require(\"nlp_compromise\")\nnlp.syllables(\"hamburger\")\n//[ 'ham', 'bur', 'ger' ]\n```\n\n## API\n\n###Sentence methods\n```javascript\n  var s= nlp.pos(\"they are lovers\")[0]\n  s.tense()\n  //present\n  s.text()\n  //\"they are lovers\"\n\n  s.to_past().text()\n  //they were lovers\n  s.to_present().text()\n  //the are lovers\n  s.to_future().text()\n  //they will be lovers\n  s.negate().text()\n  //they are not lovers\n  s.tags()\n  //[ 'PRP', 'CP', 'JJ' ]\n\n  s.nouns()\n  s.adjectives()\n  s.adverbs()\n  s.verbs()\n  s.values()\n````\n\n###noun methods:\n```javascript\nnlp.noun(\"earthquakes\").singularize()\n//earthquake\n\nnlp.noun(\"earthquake\").pluralize()\n//earthquakes\n\nnlp.noun('veggie burger').is_plural\n//false\n\nnlp.noun('hour').article()\n//an\n\nnlp.inflect('mayors of toronto'))\n//{ plural: 'mayors of toronto', singular: 'mayor of toronto' }\n```\n\n\n###verb methods:\n```javascript\nnlp.verb(\"walked\").conjugate()\n//{ infinitive: 'walk',\n//  present: 'walks',\n//  past: 'walked',\n//  gerund: 'walking'}\nnlp.verb('swimming').to_past()\n//swam\n```\n###adjective methods:\n```javascript\nnlp.adjective(\"quick\").conjugate()\n//  { comparative: 'quicker',\n//    superlative: 'quickest',\n//    adverb: 'quickly',\n//    noun: 'quickness'}\n```\n###adverb methods\n```javascript\nnlp.adverb(\"quickly\").conjugate()\n//  { adjective: 'quick'}\n```\n\n\n\n## Part-of-speech tagging\n86% on the [Penn treebank](http://www.cis.upenn.edu/~treebank/)\n```javascript\nnlp.pos(\"Tony Hawk walked quickly to the store.\")\n// [\"NN\",\"VBD\",\"RB\",\"TO\",\"DT\",\"NN\"]\n\nnlp.pos(\"the obviously good swim\")\n//[\"DT\", \"RB\", \"JJ\", \"NN\"]\n```\n\n## Named-Entity recognition\n```javascript\nnlp.spot(\"Tony Hawk walked quickly to the store.\")\n// [\"Tony Hawk\", \"store\"]\nnlp.spot(\"joe carter loves toronto\")\n// [\"joe carter\", \"toronto\"]\n```\n\n## Sentence segmentation\n1.7k\n```javascript\nnlp.sentences(\"Hi Dr. Miller the price is 4.59 for the U.C.L.A. Ph.Ds.\").length\n//1\n\nnlp.tokenize(\"she sells sea-shells\").length\n//3\n```\n\n## Syllable hyphenization\n70% on the [moby hyphenization corpus](http://www.gutenberg.org/dirs/etext02/mhyph10.zip)  0.5k\n```javascript\nnlp.syllables(\"hamburger\")\n//[ 'ham', 'bur', 'ger' ]\n```\n\n## US-UK Localization\n```javascript\nnlp.americanize(\"favourite\")\n//favorite\nnlp.britishize(\"synthesized\")\n//synthesised\n```\n## N-gram\n```javascript\nstr= \"She sells seashells by the seashore. The shells she sells are surely seashells.\"\nnlp.ngram(str, {min_count:1, max_size:5})\n// [{ word: 'she sells', count: 2, size: 2 },\n// ...\noptions.min_count // throws away seldom-repeated grams. defaults to 1\noptions.max_gram // prevents the result from becoming gigantic. defaults to 5\n```\n<!--\n### Date parsing\n```javascript\nnlp.dates(\"I married April for the 2nd time on June 5th 1998 \")\n// { text: 'June 5th 1998',\n//   from: { year: '1998', month: '06', day: '05' },\n//   to: {} }\n```\n### Number parsing\n```javascript\nnlp.to_number(\"two thousand five hundred and sixty\")\n//2560\nnlp.to_number(\"ten and a half million\")\n//15000000\n``` -->\n### Unicode Normalisation\na hugely-ignorant, and widely subjective transliteration of latin, cryllic, greek unicode characters to english ascii.\n```javascript\nnlp.normalise(\"Björk\")\n//Bjork\n```\nand for fun,\n```javascript\nnlp.denormalise(\"The quick brown fox jumps over the lazy dog\", {percentage:50})\n// The ɋӈїck brown fox juӎÞs over tӊe laζy dog\n```\n\n### Details\n#### Tags\n```javascript\n  \"verb\":\n    \"VB\" : \"verb, generic (eat)\"\n    \"VBD\" : \"past-tense verb (ate)\"\n    \"VBN\" : \"past-participle verb (eaten)\"\n    \"VBP\" : \"infinitive verb (eat)\"\n    \"VBZ\" : \"present-tense verb (eats, swims)\"\n    \"CP\" : \"copula (is, was, were)\"\n    \"VBG\" : \"gerund verb (eating,winning)\"\n  \"adjective\":\n    \"JJ\" : \"adjective, generic (big, nice)\"\n    \"JJR\" : \"comparative adjective (bigger, cooler)\"\n    \"JJS\" : \"superlative adjective (biggest, fattest)\"\n  \"adverb\":\n    \"RB\" : \"adverb (quickly, softly)\"\n    \"RBR\" : \"comparative adverb (faster, cooler)\"\n    \"RBS\" : \"superlative adverb (fastest (driving), coolest (looking))\"\n  \"noun\":\n    \"NN\" : \"noun, singular (dog, rain)\"\n    \"NNP\" : \"singular proper noun (Edinburgh, skateboard)\"\n    \"NNPS\" : \"plural proper noun (Smiths)\"\n    \"NNS\" : \"plural noun (dogs, foxes)\"\n    \"NNO\" : \"possessive noun (spencer's, sam's)\"\n    \"NG\" : \"gerund noun (eating,winning\" : \"but used grammatically as a noun)\"\n    \"PRP\" : \"personal pronoun (I,you,she)\"\n  \"glue\":\n    \"PP\" : \"possessive pronoun (my,one's)\"\n    \"FW\" : \"foreign word (mon dieu, voila)\"\n    \"IN\" : \"preposition (of,in,by)\"\n    \"MD\" : \"modal verb (can,should)\"\n    \"CC\" : \"co-ordating conjunction (and,but,or)\"\n    \"DT\" : \"determiner (the,some)\"\n    \"UH\" : \"interjection (oh, oops)\"\n    \"EX\" : \"existential there (there)\"\n  \"value\":\n    \"CD\" : \"cardinal value, generic (one, two, june 5th)\"\n    \"DA\" : \"date (june 5th, 1998)\"\n    \"NU\" : \"number (89, half-million)\"\n```\n\n####Lexicon\nBecause the library can conjugate all sorts of forms, it only needs to store one grammatical form.\nThe lexicon was built using the [American National Corpus](http://www.americannationalcorpus.org/), then intersected with the regex rule-list. For example, it lists only 300 verbs, then blasts-out their 1200+ derived forms.\n\n####Contractions\nUnlike other nlp toolkits, this library puts a 'silent token' into the phrase for contractions. Otherwise something would be neglected.\n```javascript\nnlp.pos(\"i'm good.\")\n   [{\n   \ttext:\"i'm\",\n   \tnormalised:\"i\",\n   \tpos:\"PRP\"\n   },\n   {\n   \ttext:\"\",\n   \tnormalised:\"am\",\n   \tpos:\"CP\"\n   },\n   {\n   \ttext:\"good.\",\n   \tnormalised:\"good\",\n   \tpos:\"JJ\"\n   }]\n```\n####Tokenization\nneighbouring words with the same part of speech are merged together, unless there is punctuation, different capitalisation, or special cases.\n```javascript\nnlp.pos(\"tony hawk won\")\n//tony hawk   NN\n//won   VB\n```\nTo turn this off:\n```javascript\nnlp.pos(\"tony hawk won\", {dont_combine:true})\n//tony   NN\n//hawk   NN\n//won   VB\n```\n\n\n\n## Licence\n[go-fer-it.](http://www.wtfpl.net/txt/copying/)\n",
  "readmeFilename": "README.markdown",
  "_id": "nlp_compromise@0.2.2",
  "_from": "nlp_compromise@~0.2.2"
}
